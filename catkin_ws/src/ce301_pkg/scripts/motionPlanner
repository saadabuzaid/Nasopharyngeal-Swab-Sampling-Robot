#!/usr/bin/python
from __future__ import print_function


import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg

print("====== Starting tutorial setup")
moveit_commander.roscpp_initialize(sys.argv)
rospy.init_node('move_group_python_interface_tutorial',anonymous=True)
robot = moveit_commander.RobotCommander()
scene = moveit_commander.PlanningSceneInterface()
move_group = moveit_commander.MoveGroupCommander("manipulator")
display_trajectory_publisher = rospy.Publisher('move_group/display_planned_path',moveit_msgs.msg.DisplayTrajectory)

print ("====== Waiting for RVIZ ...")
#rospy.sleep(20)
print ("====== Starting tutorial")
print ("====== Robot Groups:")
print (robot.get_group_names())
print ("====== Printing robot state")
print (robot.get_current_state())
print ("=============")


print ("=============")
print(move_group.get_current_pose().pose)

waypoints = []
scale = 1
wpose = move_group.get_current_pose().pose
wpose.position.z -= 0.0  # First move up (z)
wpose.position.y +=  0.0  # and sideways (y)
waypoints.append(copy.deepcopy(wpose))

wpose.position.x = 0.1  # Second move forward/backwards in (x)
waypoints.append(copy.deepcopy(wpose))

wpose.position.y += 0.0  # Third move sideways (y)
waypoints.append(copy.deepcopy(wpose))

# We want the Cartesian path to be interpolated at a resolution of 1 cm
# which is why we will specify 0.01 as the eef_step in Cartesian
# translation.  We will disable the jump threshold by setting it to 0.0,
# ignoring the check for infeasible jumps in joint space, which is sufficient
# for this tutorial.
(plan, fraction) = move_group.compute_cartesian_path(
    waypoints, 0.01, 0.0  # waypoints to follow  # eef_step
)  # jump_threshold

# Note: We are just planning, not asking move_group to actually move the robot yet:
#return plan, fraction

move_group.execute(plan, wait=True)


